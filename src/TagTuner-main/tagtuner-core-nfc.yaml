# this is a modified PN532 to make it work with 888byte tags
external_components:
  # - source: ./components
  - source: github://luka6000/TagTuner@main
    components: [ pn532 ]
    refresh: 1min

binary_sensor:
  - platform: template
    name: "=Tag="
    id: is_tag
    device_class: vibration
    entity_category: DIAGNOSTIC
    disabled_by_default: true

  - platform: template
    name: "=Reading="
    id: txt_reading
    device_class: running
    entity_category: DIAGNOSTIC
    lambda: |-
      if ( !id(pn532_board).is_writing() ) {
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "=Writing="
    id: txt_writing
    device_class: running
    entity_category: DIAGNOSTIC
    lambda: |-
      if ( id(pn532_board).is_writing() ) {
        return true;
      } else {
        return false;
      }

script:
  - id: wait_input
    then:
      - delay: 3s
      - text_sensor.template.publish:
          id: status
          state: "Waiting for input"
  - id: set_tag
    then:
      - text.set:
          id: playlist_artist
          value: !lambda |-
            return id(artist);
      - delay: 10ms
      - text.set:
          id: playlist_info
          value: !lambda |-
            return id(playlist);
      - delay: 10ms
      - text.set:
          id: playlist_uri
          value: !lambda |-
            ESP_LOGD("tagtuner", "URI NDEF");
            return id(uri);

text:
  - platform: template
    id: playlist_artist
    name: "Playlist artist"
    icon: mdi:account-music
    entity_category: CONFIG
    optimistic: true
    min_length: 0
    max_length: 50
    mode: text
    initial_value: " "
  - platform: template
    id: playlist_info
    name: "Playlist name or album title"
    icon: mdi:playlist-music
    entity_category: CONFIG
    optimistic: true
    min_length: 0
    max_length: 100
    mode: text
    initial_value: " "
  - platform: template
    id: playlist_uri
    name: "Playlist URI"
    icon: mdi:link-variant
    entity_category: CONFIG
    optimistic: true
    min_length: 0
    max_length: 255
    mode: text
    initial_value: " "

text_sensor:
  - platform: template
    id: status
    name: "Status"
    icon: mdi:ladybug
    entity_category: DIAGNOSTIC
    on_value:
      if:
        condition:
          lambda: 'return id(status).state != "Waiting for input";'
        then:
        - script.stop: wait_input
        - script.execute: wait_input

button:
  - platform: restart
    name: "Restart"
    id: btn_restart
    entity_category: DIAGNOSTIC

  - platform: template
    name: Cancel writing 
    id: btn_cancel_writing
    icon: "mdi:broadcast-off"
    entity_category: CONFIG
    on_press:
      then:
      - lambda: 'id(pn532_board).read_mode();'
      - wait_until:
          timeout: 30s
          condition:
            not:
              pn532.is_writing:
      - delay: 5ms
      - text_sensor.template.publish:
          id: status
          state: "Cancel writing tag"
      - script.execute: led_ok

  - platform: template
    name: Erase Tag
    id: btn_erase_tag
    icon: "mdi:nfc-search-variant"
    entity_category: CONFIG    
    on_press:
      then:
      - script.execute: led_tagwrite
      - text.set:
          id: playlist_artist
          value: ''
      - text.set:
          id: playlist_info
          value: ''
      - text.set:
          id: playlist_uri
          value: ''
      - lambda: 'id(pn532_board).format_mode();'
      - text_sensor.template.publish:
          id: status
          state: "Place tag"
      - wait_until:
          timeout: 30s
          condition:
            not:
              pn532.is_writing:
      - if:
          condition:
            pn532.is_writing:
          then:
          - lambda: 'id(pn532_board).read_mode();'
      - text_sensor.template.publish:
          id: status
          state: "Finished erasing tag"
      - script.execute: led_success

  - platform: template
    name: Write Tag
    id: btn_write_tag
    icon: "mdi:cast-audio-variant"
    entity_category: CONFIG    
    on_press:
      then:
      - script.execute: led_tagwrite
      - lambda: |-
          auto message = new nfc::NdefMessage();
          message->add_text_record("TagTuner");
          std::string uri = "";
          std::string artist = "artist/";
          std::string playlist = "playlist/";
          uri += id(playlist_uri).state;
          artist += id(playlist_artist).state;
          playlist += id(playlist_info).state;
          if ( artist != "" ) {
            message->add_text_record(artist);
          }
          if ( playlist != "" ) {
            message->add_text_record(playlist);
          }
          if ( uri != "" ) {
            message->add_uri_record(uri);
          }
          ESP_LOGD("ndef", "Writing payload: %s", uri.c_str());
          id(pn532_board).write_mode(message);
      - text_sensor.template.publish:
          id: status
          state: "Place tag"
      - wait_until:
          timeout: 30s
          condition:
            not:
              pn532.is_writing:
      - if:
          condition:
            pn532.is_writing:
          then:
          - lambda: 'id(pn532_board).read_mode();'
      - text_sensor.template.publish:
          id: status
          state: "Finished writing tag"
      - script.execute: led_success

globals:
  - id: artist
    type: std::string
  - id: playlist
    type: std::string
  - id: uri
    type: std::string

pn532_i2c:
- id: pn532_board
  i2c_id: bus_i2c
  update_interval: 350ms
  on_tag_removed:
    - binary_sensor.template.publish:
        id: is_tag
        state: false
    - text_sensor.template.publish:
        id: status
        state: "Tag removed"
    - script.execute:
        id: tagtuner_event
        action: "tagRemoved"
        uid: !lambda 'return x;'
        uri: ""
        artist: ""
        playlist: ""
    - script.execute: led_blink

  on_tag:
    - binary_sensor.template.publish:
        id: is_tag
        state: true
    - text_sensor.template.publish:
        id: status
        state: !lambda 'return "Tag "+x;'
    - lambda: |-
        id(playlist)="";
        id(artist)="";
        id(uri)="";
        if (tag.has_ndef_message()) {
          for (auto &record : tag.get_ndef_message()->get_records() ) {
            std::string payload = record->get_payload();
            std::string type = record->get_type();

            if ( payload.substr(0, 7) == "artist/" ) {
              id(artist)=payload.substr(7);
            }
            else if ( payload.substr(0, 9) == "playlist/" ) {
              id(playlist)=payload.substr(9);
            }
            else if (type == "U"
            && payload.substr(0, 20) != "https://mb.senic.com"
            && payload.substr(0, 23) != "https://www.philips.com"
            ) {
              id(uri)=payload;
            }

          }
        }
    - if:
        condition:
          lambda: 'return id(uri) == "" ;'
        then:
          - text_sensor.template.publish:
              id: status
              state: "Plain UID tag"
          - homeassistant.tag_scanned: !lambda |-
              ESP_LOGD("tagtuner", "No TagTuner NDEF, using UID");
              return x;
        else:
          - script.execute:
              id: tagtuner_event
              action: "tagScanned"
              uid: !lambda 'return x;'
              uri: !lambda 'return id(uri);'
              artist: !lambda 'return id(artist);'
              playlist: !lambda 'return id(playlist);'
          - script.execute: set_tag
    - script.execute: led_ok
