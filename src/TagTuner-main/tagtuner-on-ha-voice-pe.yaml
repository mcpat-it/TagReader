substitutions:
  name: tagtuner-on-ha-voice
  friendly_name: TagTuner on HA Voice

packages:
  Nabu Casa.Home Assistant Voice PE: github://esphome/home-assistant-voice-pe/home-assistant-voice.yaml

  project: github://luka6000/TagTuner/tagtuner-project.yaml@main
  core-nfc: github://luka6000/TagTuner/tagtuner-core-nfc.yaml@main
  core-comms: github://luka6000/TagTuner/tagtuner-core-comms.yaml@main
  # project: !include tagtuner-project.yaml
  # core-nfc: !include tagtuner-core-nfc.yaml
  # core-comms: !include tagtuner-core-comms.yaml

i2c:
  - id: bus_i2c
    sda: GPIO1
    scl: GPIO2
    scan: False
    frequency: 100kHz

switch:
  - platform: gpio
    pin: GPIO46
    id: grove_port_power
    restore_mode: ALWAYS_ON
    setup_priority: 1001  # This sets the pin to be on before the i2c scan happens (priority 1000)

esphome:
  name: "${name}"
  friendly_name: ${friendly_name}
  name_add_mac_suffix: true
  min_version: 2025.2.0
  on_boot:
    priority: 375
    then:
      # Run the script to refresh the LED status
      - script.execute: control_leds
      - delay: 1s
      - switch.turn_on: internal_speaker_amp
      # If the hardware switch is ON, force the software switch to be ON too. This covers the case where the Mute hardware switch is operated when the device is turned off
      - if:
          condition:
            binary_sensor.is_on: hardware_mute_switch
          then:
            - switch.template.publish:
                id: master_mute_switch
                state: ON
#+tagtuner
      - wait_until:
          condition:
            api.connected:
          timeout: 20s
      - text_sensor.template.publish:
          id: status
          state: "Ready"
#=tagtuner
      # If after 10 minutes, the device is still initializing (It did not yet connect to Home Assistant), turn off the init_in_progress variable and run the script to refresh the LED status
      - delay: 10min
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: control_leds

# To be able to get logs from the device via serial and api.
# logger:
#   # level: VERBOSE
#   level: DEBUG
#   # level: WARN
#   logs:
#     light: WARN
#     # pn532: DEBUG
#     # pn532_i2c: DEBUG

# bluetooth_proxy:
#   active: false

sensor:
  - id: !remove dial
  # The dial. Used to control volume and Hue of the LED ring.
  - platform: rotary_encoder
    id: dial
    pin_a: GPIO16
    pin_b: GPIO18
    resolution: 2
    on_clockwise:
      - lambda: id(dial_touched) = true;
#+tagtuner
      - if:
          condition:
            binary_sensor.is_on: is_tag
          then:
            - if:
                condition:
                  binary_sensor.is_off: center_button
                then:
                  - text_sensor.template.publish:
                      id: status
                      state: "Volume up"
                  - script.execute:
                      id: tagtuner_event
                      action: "volumeUp"
                      uid: !lambda 'return std::to_string(id(external_media_player).volume);'
                      uri: ""
                      artist: ""
                      playlist: ""
                  - script.execute:
                      id: control_leds_dial_touched
                else:
                  - script.execute:
                      id: control_volume
                      increase_volume: true
          else:
#=tagtuner
            - if:
                condition:
                  binary_sensor.is_off: center_button
                then:
                  - script.execute:
                      id: control_volume
                      increase_volume: true
                else:
                  - script.execute:
                      id: control_hue
                      increase_hue: true
      - delay: 3s
      - lambda: id(dial_touched) = false;
      - script.execute: control_leds
    on_anticlockwise:
      - lambda: id(dial_touched) = true;
#+tagtuner
      - if:
          condition:
            binary_sensor.is_on: is_tag
          then:
            - if:
                condition:
                  binary_sensor.is_off: center_button
                then:
                  - text_sensor.template.publish:
                      id: status
                      state: "Volume down"
                  - script.execute:
                      id: tagtuner_event
                      action: "volumeDown"
                      uid: !lambda 'return std::to_string(id(external_media_player).volume);'
                      uri: ""
                      artist: ""
                      playlist: ""
                  - script.execute:
                      id: control_leds_dial_touched
                else:
                  - script.execute:
                      id: control_volume
                      increase_volume: false
          else:
#=tagtuner
            - if:
                condition:
                  binary_sensor.is_off: center_button
                then:
                  - script.execute:
                      id: control_volume
                      increase_volume: false
                else:
                  - script.execute:
                      id: control_hue
                      increase_hue: false
      - delay: 3s
      - lambda: id(dial_touched) = false;
      - script.execute: control_leds

binary_sensor:
  - id: !remove center_button
  # Center Button. Used for many things (See on_multi_click)
  - platform: gpio
    id: center_button
    pin:
      number: GPIO0
      inverted: true
    on_press:
      - script.execute: control_leds
    on_release:
      - script.execute: control_leds
      # If a factory reset is requested, factory reset on release
      - if:
          condition:
            lambda: return id(factory_reset_requested);
          then:
            - button.press: factory_reset_button
    on_multi_click:
      # Simple Click:
      #   - Abort "things" in order
      #     - Timer
      #     - Announcements
      #     - Voice Assistant Pipeline run
      #     - Music
      #   - Starts the voice assistant if it is not yet running and if the device is not muted.
      - timing:
          - ON for at most 1s
          - OFF for at least 0.25s
        then:
#+tagtuner
          - if:
              condition:
                binary_sensor.is_on: is_tag
              then:
                - text_sensor.template.publish:
                    id: status
                    state: "clickSingle"
                - script.execute:
                    id: tagtuner_event
                    action: "clickSingle"
                    uid: ""
                    uri: ""
                    artist: ""
                    playlist: ""
              else:
#=tagtuner
                - if:
                    condition:
                      lambda: return !id(init_in_progress) && !id(color_changed);
                    then:
                      - if:
                          condition:
                            switch.is_on: timer_ringing
                          then:
                            - switch.turn_off: timer_ringing
                          else:
                            - if:
                                condition:
                                  lambda: return id(external_media_player)->state == media_player::MediaPlayerState::MEDIA_PLAYER_STATE_ANNOUNCING;
                                then:
                                  - lambda: |
                                      id(external_media_player)
                                        ->make_call()
                                        .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_STOP)
                                        .set_announcement(true)
                                        .perform();
                                else:
                                  - if:
                                      condition:
                                        voice_assistant.is_running:
                                      then:
                                        - voice_assistant.stop:
                                      else:
                                        - if:
                                            condition:
                                              media_player.is_playing:
                                            then:
                                              - media_player.pause:
                                            else:
                                              - if:
                                                  condition:
                                                    and:
                                                      - switch.is_off: master_mute_switch
                                                      - not:
                                                          voice_assistant.is_running
                                                  then:
                                                    - script.execute:
                                                        id: play_sound
                                                        priority: true
                                                        sound_file: !lambda return id(center_button_press_sound);
                                                    - delay: 300ms
                                                    - voice_assistant.start:
      # Double Click
      #  . Exposed as an event entity. To be used in automations inside Home Assistant
      - timing:
          - ON for at most 1s
          - OFF for at most 0.25s
          - ON for at most 1s
          - OFF for at least 0.25s
        then:
#+tagtuner
          - if:
              condition:
                binary_sensor.is_on: is_tag
              then:
                - text_sensor.template.publish:
                    id: status
                    state: "clickDouble"
                - script.execute:
                    id: tagtuner_event
                    action: "clickDouble"
                    uid: ""
                    uri: ""
                    artist: ""
                    playlist: ""
              else:
#=tagtuner
                - if:
                    condition:
                      lambda: return !id(init_in_progress) && !id(color_changed);
                    then:
                      - script.execute:
                          id: play_sound
                          priority: false
                          sound_file: !lambda return id(center_button_double_press_sound);
                      - event.trigger:
                          id: button_press_event
                          event_type: "double_press"
      # Triple Click
      #  . Exposed as an event entity. To be used in automations inside Home Assistant
      - timing:
          - ON for at most 1s
          - OFF for at most 0.25s
          - ON for at most 1s
          - OFF for at most 0.25s
          - ON for at most 1s
          - OFF for at least 0.25s
        then:
#+tagtuner
          - if:
              condition:
                binary_sensor.is_on: is_tag
              then:
                - text_sensor.template.publish:
                    id: status
                    state: "clickTriple"
                - script.execute:
                    id: tagtuner_event
                    action: "clickTriple"
                    uid: ""
                    uri: ""
                    artist: ""
                    playlist: ""
              else:
#=tagtuner
                - if:
                    condition:
                      lambda: return !id(init_in_progress) && !id(color_changed);
                    then:
                      - script.execute:
                          id: play_sound
                          priority: false
                          sound_file: !lambda return id(center_button_triple_press_sound);
                      - event.trigger:
                          id: button_press_event
                          event_type: "triple_press"
      # Long Press
      #  . Exposed as an event entity. To be used in automations inside Home Assistant
      - timing:
          - ON for at least 1s
        then:
#+tagtuner
          - if:
              condition:
                binary_sensor.is_on: is_tag
              then:
                - if:
                    condition:
                      lambda: return !id(dial_touched);
                    then:
                      - text_sensor.template.publish:
                          id: status
                          state: "clickLong"
                      - script.execute:
                          id: tagtuner_event
                          action: "clickLong"
                          uid: ""
                          uri: ""
                          artist: ""
                          playlist: ""
              else:
#=tagtuner
                - if:
                    condition:
                      lambda: return !id(init_in_progress) && !id(color_changed);
                    then:
                      - script.execute:
                          id: play_sound
                          priority: false
                          sound_file: !lambda return id(center_button_long_press_sound);
                      - light.turn_off: voice_assistant_leds
                      - event.trigger:
                          id: button_press_event
                          event_type: "long_press"
      # Very important do not remove. Trust me :D
      - timing:
          # H ....
          - ON for at most 0.2s
          - OFF for 0s to 2s
          - ON for at most 0.2s
          - OFF for 0s to 2s
          - ON for at most 0.2s
          - OFF for 0s to 2s
          - ON for at most 0.2s
          - OFF for 0.5s to 2s
          # A ._
          - ON for at most 0.2s
          - OFF for 0s to 2s
          - ON for 0.2s to 2s
        then:
          - if:
              condition:
                lambda: return !id(init_in_progress);
              then:
                - light.turn_on:
                    brightness: 100%
                    id: voice_assistant_leds
                    effect: "Tick"
                - script.execute:
                    id: play_sound
                    priority: true
                    sound_file: !lambda return id(easter_egg_tick_sound);
                - delay: 4s
                - light.turn_off: voice_assistant_leds
                - script.execute:
                    id: play_sound
                    priority: true
                    sound_file: !lambda return id(easter_egg_tada_sound);
                - light.turn_on:
                    brightness: 100%
                    id: voice_assistant_leds
                    effect: "Rainbow"
                - event.trigger:
                    id: button_press_event
                    event_type: "easter_egg_press"
      # Factory Reset Warning
      #  . Audible and Visible warning.
      - timing:
          - ON for at least 10s
        then:
          - if:
              condition:
                lambda: return !id(dial_touched);
              then:
                - light.turn_on:
                    brightness: 100%
                    id: voice_assistant_leds
                    effect: "Factory Reset Coming Up"
                - script.execute:
                    id: play_sound
                    priority: true
                    sound_file: !lambda return id(factory_reset_initiated_sound);
                - wait_until:
                    binary_sensor.is_off: center_button
                - if:
                    condition:
                      lambda: return !id(factory_reset_requested);
                    then:
                      - light.turn_off: voice_assistant_leds
                      - script.execute:
                          id: play_sound
                          priority: true
                          sound_file: !lambda return id(factory_reset_cancelled_sound);
      # Factory Reset Confirmed.
      #  . Audible warning to prompt user to release the button
      #  . Set factory_reset_requested to true
      - timing:
          - ON for at least 22s
        then:
          - if:
              condition:
                lambda: return !id(dial_touched);
              then:
                - script.execute:
                    id: play_sound
                    priority: true
                    sound_file: !lambda return id(factory_reset_confirmed_sound);
                - light.turn_on:
                    brightness: 100%
                    red: 100%
                    green: 0%
                    blue: 0%
                    id: voice_assistant_leds
                    effect: "none"
                - lambda: id(factory_reset_requested) = true;

script:
  - id: led_blink
    then:
    - lambda: 'return;'
    - script.execute:
        id: control_leds_center_button_touched
    - delay: 50ms
    - light.turn_off: voice_assistant_leds
  - id: led_ok
    then:
    - lambda: 'return;'
    - script.execute:
        id: control_leds_center_button_touched
    - delay: 50ms
    - light.turn_off: voice_assistant_leds
    - delay: 50ms
    - script.execute:
        id: control_leds_center_button_touched
    - delay: 50ms
    - light.turn_off: voice_assistant_leds
  - id: led_success
    then:
    - lambda: 'return;'
    - light.turn_on:
        brightness: 100%
        red: 0%
        green: 100%
        blue: 0%
        id: voice_assistant_leds
        effect: "Twinkle"
    - delay: 1000ms
    - light.turn_off: voice_assistant_leds

  - id: led_tagwrite
    then:
    - lambda: 'return;'
    - light.turn_on:
        brightness: 100%
        red: 100%
        green: 0%
        blue: 0%
        id: voice_assistant_leds
        effect: "Twinkle"

  - id: !remove control_leds
  # Master script controlling the LEDs, based on different conditions : initialization in progress, wifi and api connected and voice assistant phase.
  # For the sake of simplicity and re-usability, the script calls child scripts defined below.
  # This script will be called every time one of these conditions is changing.
  - id: control_leds
    then:
      - lambda: |
          id(check_if_timers_active).execute();
          if (id(is_timer_active)){
            id(fetch_first_active_timer).execute();
          }
          if (id(improv_ble_in_progress)) {
            id(control_leds_improv_ble_state).execute();
          } else if (id(init_in_progress)) {
            id(control_leds_init_state).execute();
          } else if (!id(wifi_id).is_connected() || !id(api_id).is_connected()){
            id(control_leds_no_ha_connection_state).execute();
          } else if (id(jack_plugged_recently)) {
            id(control_leds_jack_plugged_recently).execute();
          } else if (id(jack_unplugged_recently)) {
            id(control_leds_jack_unplugged_recently).execute();
          } else if (id(dial_touched)) {
            id(control_leds_dial_touched).execute();
          } else if (id(timer_ringing).state) {
            id(control_leds_timer_ringing).execute();
          } else if (id(center_button).state) {
            id(control_leds_center_button_touched).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_waiting_for_command_phase_id}) {
            id(control_leds_voice_assistant_waiting_for_command_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_listening_for_command_phase_id}) {
            id(control_leds_voice_assistant_listening_for_command_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_thinking_phase_id}) {
            id(control_leds_voice_assistant_thinking_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_replying_phase_id}) {
            id(control_leds_voice_assistant_replying_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_error_phase_id}) {
            id(control_leds_voice_assistant_error_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_not_ready_phase_id}) {
            id(control_leds_voice_assistant_not_ready_phase).execute();
          } else if (id(is_timer_active)) {
            id(control_leds_timer_ticking).execute();
          } else if (id(master_mute_switch).state) {
            id(control_leds_muted_or_silent).execute();
          } else if (id(external_media_player).volume == 0.0f || id(external_media_player).is_muted()) {
            id(control_leds_muted_or_silent).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_idle_phase_id}) {
            id(control_leds_voice_assistant_idle_phase).execute();
          }